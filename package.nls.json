{
    "config.common.enum.default.description": "Use value from `.emmyrc.json` or fall back to default",
    "config.common.enum.off.description": "Override `.emmyrc.json` and disable this option",
    "config.common.enum.on.description": "Override `.emmyrc.json` and enable this option",
    "config.emmylua.codeAction.insertSpace.description": "Add space after `---` comments when inserting `@diagnostic disable-next-line`.",
    "config.emmylua.codeLens.enable.description": "Enable code lens.",
    "config.emmylua.colors.global.description": "If not empty, highlights global variables with the given color",
    "config.emmylua.colors.local.description": "If not empty, highlights local variables with the given color",
    "config.emmylua.colors.mutableUnderline.description": "Add underline to variables if they're reassigned within their scope",
    "config.emmylua.colors.parameter.description": "If not empty, highlights function parameters with the given color",
    "config.emmylua.completion.autoRequire.description": "Automatically insert call to `require` when autocompletion\ninserts objects from other modules.",
    "config.emmylua.completion.baseFunctionIncludesName.description": "Whether to include the name in the base function completion. Effect: `function () end` -> `function name() end`.",
    "config.emmylua.completion.enable.description": "Enable autocompletion.",
    "config.emmylua.completion.postfix.description": "Symbol that's used to trigger postfix autocompletion.",
    "config.emmylua.diagnostics.diagnosticInterval.description": "Delay between opening/changing a file and scanning it for errors, in milliseconds.",
    "config.emmylua.documentColor.enable.description": "Enable parsing strings for color tags and showing a color picker next to them.",
    "config.emmylua.hint.enable.description": "Enable inlay hints.",
    "config.emmylua.hint.enumParamHint.description": "Show name of enumerator when passing a literal value to a function\nthat expects an enum.\n\nExample:\n\n```lua\n--- @enum Level\nlocal Foo = {\n   Info = 1,\n   Error = 2,\n}\n\n--- @param l Level\nfunction print_level(l) end\n\nprint_level(1 --[[ Hint: Level.Info ]])\n```",
    "config.emmylua.hint.indexHint.description": "Show named array indexes.\n\nExample:\n\n```lua\nlocal array = {\n   [1] = 1, -- [name]\n}\n\nprint(array[1] --[[ Hint: name ]])\n```",
    "config.emmylua.hint.localHint.description": "Show types of local variables.",
    "config.emmylua.hint.metaCallHint.description": "Show hint when calling an object results in a call to\nits meta table's `__call` function.",
    "config.emmylua.hint.overrideHint.description": "Show methods that override functions from base class.",
    "config.emmylua.hint.paramHint.description": "Show parameter names in function calls and parameter types in function definitions.",
    "config.emmylua.hover.enable.description": "Enable showing documentation on hover.",
    "config.emmylua.inlineValues.enable.description": "Show inline values during debug.",
    "config.emmylua.language.completeAnnotation.description": "Automatically insert `\"---\"` when line breaking after a comment",
    "config.emmylua.ls.executablePath.description": "Override path to the EmmyLua language server executable.\n\nUses bundled language server if not specified",
    "config.emmylua.ls.globalConfigPath.description": "Path to the global `.emmyrc.json`.\n\nSettings from this file will be used if they're not overridden by the project's `.emmyrc.json`",
    "config.emmylua.ls.startParameters.description": "Additional arguments to be passed to the EmmyLua language server",
    "config.emmylua.references.enable.description": "Enable searching for symbol usages.",
    "config.emmylua.references.fuzzySearch.description": "Use fuzzy search when searching for symbol usages\nand normal search didn't find anything.",
    "config.emmylua.references.shortStringSearch.description": "Also search for usages in strings.",
    "config.emmylua.semanticTokens.enable.description": "Enable semantic tokens.",
    "config.emmylua.semanticTokens.renderDocumentationMarkup.description": "Render Markdown/RST in documentation. Set `doc.syntax` for this option to have effect.",
    "config.emmylua.workspace.enableReindex.description": "Enable full project reindex after changing a file.",
    "config.emmylua.workspace.reindexDuration.description": "Delay between changing a file and full project reindex, in milliseconds.",
    "config.lua.trace.server.description": "Traces the communication between VSCode and the EmmyLua language server in the Output view. Default is `off`",
    "debug.attach.captureLog": "Capture process log with Windows Terminal",
    "debug.attach.desc": "Attach process debugger",
    "debug.attach.label": "EmmyLua: Attach by process id",
    "debug.attach.name": "Attach by process id",
    "debug.attach.target_pid": "Target pid",
    "debug.attach.target_process": "Attach process by name",
    "debug.launch.arguments": "arguments pass to executable file",
    "debug.launch.blockOnExit": "block process when exit",
    "debug.launch.desc": "Launch program and debug with attach debugger",
    "debug.launch.label": "EmmyLua: Attach by launch program",
    "debug.launch.name": "Attach by launch program",
    "debug.launch.newWindow": "create new windows",
    "debug.launch.program": "Launch program and debug executable file",
    "debug.launch.workingDir": "working directory"
}
